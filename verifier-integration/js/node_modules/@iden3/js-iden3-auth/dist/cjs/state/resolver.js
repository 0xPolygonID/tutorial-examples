"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isGenesisStateId = exports.EthStateResolver = void 0;
const core_1 = require("../core/core");
const util_1 = require("../core/util");
const ethers_1 = require("ethers");
const abi_1 = require("./abi");
class EthStateResolver {
    constructor(rpcUrl, contractAddress) {
        this.rpcUrl = rpcUrl;
        this.contractAddress = contractAddress;
    }
    async resolve(id, state) {
        let url = new URL(this.rpcUrl);
        const ethersProvider = new ethers_1.ethers.providers.JsonRpcProvider({
            url: url.href,
            user: url.username,
            password: url.password,
        });
        const contract = new ethers_1.ethers.Contract(this.contractAddress, abi_1.stateABI, ethersProvider);
        const isGenesis = isGenesisStateId(id, state);
        if (isGenesis) {
            return { latest: true, state, transitionTimestamp: 0 };
        }
        const contractState = await contract.getState(id);
        if (contractState.toBigInt() === 0n) {
            throw new Error('state is not found. Identity is not genesis');
        }
        if (contractState.toBigInt() !== state) {
            const transitionInfo = await contract.getTransitionInfo(state);
            if (transitionInfo[4].toBigInt() === 0n) {
                throw new Error('Transition info contains invalid id');
            }
            if (transitionInfo[0].toBigInt() === 0n) {
                throw new Error('No information of transition for non-latest state');
            }
            return {
                latest: false,
                state: state,
                transitionTimestamp: transitionInfo[0].toBigInt(),
            };
        }
        return { latest: true, state, transitionTimestamp: 0 };
    }
}
exports.EthStateResolver = EthStateResolver;
function isGenesisStateId(id, state) {
    const idBytes = (0, util_1.toLittleEndian)(id, 31);
    const typeBJP0 = new Uint8Array(2);
    const stateBytes = (0, util_1.toLittleEndian)(state, 32);
    const idGenesisBytes = stateBytes.slice(-27);
    // we take last 27 bytes, because of swapped endianness
    const idFromStateBytes = Uint8Array.from([
        ...typeBJP0,
        ...idGenesisBytes,
        ...core_1.Core.calculateChecksum(typeBJP0, idGenesisBytes),
    ]);
    if (JSON.stringify(idBytes) !== JSON.stringify(idFromStateBytes)) {
        return false;
    }
    return true;
}
exports.isGenesisStateId = isGenesisStateId;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RhdGUvcmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQW9DO0FBQ3BDLHVDQUE4QztBQUM5QyxtQ0FBZ0M7QUFDaEMsK0JBQWlDO0FBVWpDLE1BQWEsZ0JBQWdCO0lBSTNCLFlBQVksTUFBYyxFQUFFLGVBQXVCO1FBQ2pELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO0lBQ3pDLENBQUM7SUFDTSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQVUsRUFBRSxLQUFhO1FBQzVDLElBQUksR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMvQixNQUFNLGNBQWMsR0FBRyxJQUFJLGVBQU0sQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDO1lBQzFELEdBQUcsRUFBRSxHQUFHLENBQUMsSUFBSTtZQUNiLElBQUksRUFBRSxHQUFHLENBQUMsUUFBUTtZQUNsQixRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVE7U0FDdkIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxRQUFRLEdBQUcsSUFBSSxlQUFNLENBQUMsUUFBUSxDQUNsQyxJQUFJLENBQUMsZUFBZSxFQUNwQixjQUFRLEVBQ1IsY0FBYyxDQUNmLENBQUM7UUFDRixNQUFNLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDOUMsSUFBSSxTQUFTLEVBQUU7WUFDYixPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxFQUFFLENBQUM7U0FDeEQ7UUFFRCxNQUFNLGFBQWEsR0FBRyxNQUFNLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFbEQsSUFBSSxhQUFhLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ25DLE1BQU0sSUFBSSxLQUFLLENBQUMsNkNBQTZDLENBQUMsQ0FBQztTQUNoRTtRQUVELElBQUksYUFBYSxDQUFDLFFBQVEsRUFBRSxLQUFLLEtBQUssRUFBRTtZQUN0QyxNQUFNLGNBQWMsR0FBRyxNQUFNLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUUvRCxJQUFJLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUU7Z0JBQ3ZDLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQzthQUN4RDtZQUVELElBQUksY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsRUFBRTtnQkFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO2FBQ3RFO1lBRUQsT0FBTztnQkFDTCxNQUFNLEVBQUUsS0FBSztnQkFDYixLQUFLLEVBQUUsS0FBSztnQkFDWixtQkFBbUIsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFO2FBQ2xELENBQUM7U0FDSDtRQUVELE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxtQkFBbUIsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUN6RCxDQUFDO0NBQ0Y7QUFuREQsNENBbURDO0FBRUQsU0FBZ0IsZ0JBQWdCLENBQUMsRUFBVSxFQUFFLEtBQWE7SUFDeEQsTUFBTSxPQUFPLEdBQUcsSUFBQSxxQkFBYyxFQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUV2QyxNQUFNLFFBQVEsR0FBRyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuQyxNQUFNLFVBQVUsR0FBRyxJQUFBLHFCQUFjLEVBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUU3Qyx1REFBdUQ7SUFDdkQsTUFBTSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDO1FBQ3ZDLEdBQUcsUUFBUTtRQUNYLEdBQUcsY0FBYztRQUNqQixHQUFHLFdBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsY0FBYyxDQUFDO0tBQ3BELENBQUMsQ0FBQztJQUVILElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLEVBQUU7UUFDaEUsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQW5CRCw0Q0FtQkMifQ==