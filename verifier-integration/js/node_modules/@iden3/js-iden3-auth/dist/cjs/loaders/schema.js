"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLoader = exports.IpfsSchemaLoader = exports.HttpSchemaLoader = exports.UniversalSchemaLoader = void 0;
const axios_1 = __importDefault(require("axios"));
const ipfs_http_client_1 = require("ipfs-http-client");
class UniversalSchemaLoader {
    constructor(ipfsUrl) {
        this.ipfsUrl = ipfsUrl;
    }
    async load(schema) {
        const l = getLoader(schema.url, this.ipfsUrl);
        const schemaRes = await l.load(schema);
        return schemaRes;
    }
}
exports.UniversalSchemaLoader = UniversalSchemaLoader;
class HttpSchemaLoader {
    async load(schema) {
        const resp = await axios_1.default.get(schema.url, { responseType: 'arraybuffer' });
        return {
            schema: resp.data,
            extension: 'json-ld',
        };
    }
}
exports.HttpSchemaLoader = HttpSchemaLoader;
class IpfsSchemaLoader {
    constructor(url) {
        this.url = url;
        this.client = (0, ipfs_http_client_1.create)({ url: this.url });
    }
    async load(schema) {
        const uri = new URL(schema.url);
        const schemaRes = this.client.cat(uri.host);
        let schemaBytes;
        for await (const num of schemaRes) {
            schemaBytes = Uint8Array.from(num);
        }
        return {
            schema: schemaBytes,
            extension: 'json-ld',
        };
    }
}
exports.IpfsSchemaLoader = IpfsSchemaLoader;
// TODO: IPFS URL FOR BROWSER
function getLoader(url, ipfsConfigUrl) {
    const uri = new URL(url);
    switch (uri.protocol) {
        case 'http:':
        case 'https:':
            return new HttpSchemaLoader();
        case 'ipfs:':
            return new IpfsSchemaLoader(ipfsConfigUrl);
        default:
            throw new Error(`Loader not provided for given url, ${url}`);
    }
}
exports.getLoader = getLoader;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xvYWRlcnMvc2NoZW1hLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUEwQjtBQUMxQix1REFBNEU7QUFZNUUsTUFBYSxxQkFBcUI7SUFDaEMsWUFBb0IsT0FBZTtRQUFmLFlBQU8sR0FBUCxPQUFPLENBQVE7SUFBRyxDQUFDO0lBQ2hDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBYztRQUM5QixNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUMsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FDRjtBQVBELHNEQU9DO0FBRUQsTUFBYSxnQkFBZ0I7SUFDcEIsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFjO1FBQzlCLE1BQU0sSUFBSSxHQUFHLE1BQU0sZUFBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFDMUUsT0FBTztZQUNMLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBa0I7WUFDL0IsU0FBUyxFQUFFLFNBQVM7U0FDckIsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQVJELDRDQVFDO0FBQ0QsTUFBYSxnQkFBZ0I7SUFFM0IsWUFBNkIsR0FBVztRQUFYLFFBQUcsR0FBSCxHQUFHLENBQVE7UUFDdEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFBLHlCQUFNLEVBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUNNLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBYztRQUM5QixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFaEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTVDLElBQUksV0FBdUIsQ0FBQztRQUM1QixJQUFJLEtBQUssRUFBRSxNQUFNLEdBQUcsSUFBSSxTQUFTLEVBQUU7WUFDakMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDcEM7UUFFRCxPQUFPO1lBQ0wsTUFBTSxFQUFFLFdBQVc7WUFDbkIsU0FBUyxFQUFFLFNBQVM7U0FDckIsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXBCRCw0Q0FvQkM7QUFFRCw2QkFBNkI7QUFDN0IsU0FBZ0IsU0FBUyxDQUFDLEdBQVcsRUFBRSxhQUFzQjtJQUMzRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUV6QixRQUFRLEdBQUcsQ0FBQyxRQUFRLEVBQUU7UUFDcEIsS0FBSyxPQUFPLENBQUM7UUFDYixLQUFLLFFBQVE7WUFDWCxPQUFPLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztRQUNoQyxLQUFLLE9BQU87WUFDVixPQUFPLElBQUksZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFN0M7WUFDRSxNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0tBQ2hFO0FBQ0gsQ0FBQztBQWJELDhCQWFDIn0=