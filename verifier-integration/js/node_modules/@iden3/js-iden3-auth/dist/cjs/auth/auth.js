"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Verifier = exports.createAuthorizationRequestWithMessage = exports.createAuthorizationRequest = void 0;
const uuid_1 = require("uuid");
const constants_1 = require("../protocol/constants");
const zk_1 = require("../proofs/zk");
const registry_1 = require("../circuits/registry");
const js_jwz_1 = require("@iden3/js-jwz");
const util_1 = require("util");
const util_2 = require("../core/util");
function createAuthorizationRequest(reason, sender, callbackUrl) {
    return createAuthorizationRequestWithMessage(reason, '', sender, callbackUrl);
}
exports.createAuthorizationRequest = createAuthorizationRequest;
function createAuthorizationRequestWithMessage(reason, message, sender, callbackUrl) {
    const uuid = (0, uuid_1.v4)();
    const request = {
        id: uuid,
        thid: uuid,
        from: sender,
        typ: constants_1.MEDIA_TYPE_PLAIN,
        type: constants_1.AUTHORIZATION_REQUEST_MESSAGE_TYPE,
        body: {
            reason: reason,
            message: message,
            callbackUrl: callbackUrl,
            scope: [],
        },
    };
    return request;
}
exports.createAuthorizationRequestWithMessage = createAuthorizationRequestWithMessage;
class Verifier {
    constructor(keyLoader, schemaLoader, stateResolver) {
        this.keyLoader = keyLoader;
        this.schemaLoader = schemaLoader;
        this.stateResolver = stateResolver;
    }
    async verifyAuthResponse(response, request) {
        if (request.body.message != response.body.message) {
            throw new Error('message for signing from request is not presented in response');
        }
        for (const proofRequest of request.body.scope) {
            const proofResp = response.body.scope.find((proofResp) => proofResp.id === proofRequest.id);
            if (!proofResp) {
                throw new Error(`proof is not given for requestId ${proofRequest.id}`);
            }
            if (proofResp.circuit_id !== proofRequest.circuit_id) {
                throw new Error(`proof is not given for requested circuit expected: ${proofRequest.circuit_id}, given ${proofResp.circuit_id}`);
            }
            const circuitId = proofResp.circuit_id;
            const key = await this.keyLoader.load(circuitId);
            if (!key) {
                throw new Error(`verification key is not found for circuit ${circuitId}`);
            }
            const jsonKey = JSON.parse(new util_1.TextDecoder().decode(key));
            const isValid = await (0, zk_1.verifyProof)(proofResp, jsonKey);
            if (!isValid) {
                throw new Error(`Proof with circuit id ${circuitId} and request id ${proofResp.id} is not valid`);
            }
            const CircuitVerifier = registry_1.Circuits.getCircuitPubSignals(circuitId);
            if (!CircuitVerifier) {
                throw new Error(`circuit ${circuitId} is not supported by the library`);
            }
            // verify query
            const verifier = new CircuitVerifier(proofResp.pub_signals);
            await verifier.verifyQuery(proofRequest.rules['query'], this.schemaLoader);
            // verify states
            await verifier.verifyStates(this.stateResolver);
            // verify id ownership
            await verifier.verifyIdOwnership(response.from, BigInt(proofResp.id));
        }
    }
    async verifyJWZ(tokenStr) {
        const token = await js_jwz_1.Token.parse(tokenStr);
        const key = await this.keyLoader.load(token.circuitId);
        if (!key) {
            throw new Error(`verification key is not found for circuit ${token.circuitId}`);
        }
        const isValid = await token.verify(key);
        if (!isValid) {
            throw new Error(`zero-knowledge proof of jwz token is not valid`);
        }
        const CircuitVerifier = registry_1.Circuits.getCircuitPubSignals(token.circuitId);
        if (!CircuitVerifier) {
            throw new Error(`circuit ${token.circuitId} is not supported by the library`);
        }
        // outputs unmarshaller
        const verifier = new CircuitVerifier(token.zkProof.pub_signals);
        // state verification
        verifier.verifyStates(this.stateResolver);
        return token;
    }
    async fullVerify(tokenStr, request) {
        const token = await this.verifyJWZ(tokenStr);
        const payload = token.getPayload();
        const response = JSON.parse(payload.toString());
        /*
          verify that sender of AuthorizationResponseMessage is in token zkproof pubsignals
        */
        const signalsVerifierType = registry_1.Circuits.getCircuitPubSignals(token.circuitId);
        const signalsVerifier = new signalsVerifierType(token.zkProof.pub_signals);
        await signalsVerifier.verifyIdOwnership(response.from, (0, util_2.fromBigEndian)(await token.getMessageHash()));
        await this.verifyAuthResponse(response, request);
        return response;
    }
}
exports.Verifier = Verifier;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hdXRoL2F1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBSUEsK0JBQW9DO0FBRXBDLHFEQUcrQjtBQUUvQixxQ0FBMkM7QUFLM0MsbURBQWdEO0FBQ2hELDBDQUFzQztBQUN0QywrQkFBbUM7QUFDbkMsdUNBQTZDO0FBRTdDLFNBQWdCLDBCQUEwQixDQUN4QyxNQUFjLEVBQ2QsTUFBYyxFQUNkLFdBQW1CO0lBRW5CLE9BQU8scUNBQXFDLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDaEYsQ0FBQztBQU5ELGdFQU1DO0FBQ0QsU0FBZ0IscUNBQXFDLENBQ25ELE1BQWMsRUFDZCxPQUFlLEVBQ2YsTUFBYyxFQUNkLFdBQW1CO0lBRW5CLE1BQU0sSUFBSSxHQUFHLElBQUEsU0FBTSxHQUFFLENBQUM7SUFDdEIsTUFBTSxPQUFPLEdBQWdDO1FBQzNDLEVBQUUsRUFBRSxJQUFJO1FBQ1IsSUFBSSxFQUFFLElBQUk7UUFDVixJQUFJLEVBQUUsTUFBTTtRQUNaLEdBQUcsRUFBRSw0QkFBZ0I7UUFDckIsSUFBSSxFQUFFLDhDQUFrQztRQUN4QyxJQUFJLEVBQUU7WUFDSixNQUFNLEVBQUUsTUFBTTtZQUNkLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFdBQVcsRUFBRSxXQUFXO1lBQ3hCLEtBQUssRUFBRSxFQUFFO1NBQ1Y7S0FDRixDQUFDO0lBQ0YsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztBQXJCRCxzRkFxQkM7QUFFRCxNQUFhLFFBQVE7SUFLbkIsWUFDRSxTQUFxQixFQUNyQixZQUEyQixFQUMzQixhQUE2QjtRQUU3QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztJQUNyQyxD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