"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AtomicQuerySigPubSignals = void 0;
const query_1 = require("./query");
const core_1 = require("../core/core");
const id_1 = require("../core/id");
const ownershipVerifier_1 = require("./ownershipVerifier");
class AtomicQuerySigPubSignals extends ownershipVerifier_1.IDOwnershipPubSignals {
    constructor(pubSignals) {
        super();
        if (pubSignals.length != 74) {
            throw new Error(`invalid number of Output values expected ${74} got ${pubSignals.length}`);
        }
        this.issuerAuthState = BigInt(pubSignals[0]);
        const userIdBytes = core_1.Core.intToBytes(BigInt(pubSignals[1]));
        this.userId = id_1.Id.idFromBytes(userIdBytes);
        this.userState = BigInt(pubSignals[2]);
        this.challenge = BigInt(pubSignals[3]);
        const issuerIdBytes = core_1.Core.intToBytes(BigInt(pubSignals[4]));
        this.issuerId = id_1.Id.idFromBytes(issuerIdBytes);
        this.issuerClaimNonRevState = BigInt(pubSignals[5]);
        this.timestamp = parseInt(pubSignals[6], 10);
        this.claimSchema = BigInt(pubSignals[7]);
        this.slotIndex = parseInt(pubSignals[8], 10);
        this.operator = parseInt(pubSignals[9], 10);
        this.values = [];
        for (let index = 0; index < 64; index++) {
            const val = pubSignals[10 + index];
            this.values.push(BigInt(val));
        }
    }
    async verifyQuery(query, schemaLoader) {
        const outs = {
            issuerId: this.issuerId.string(),
            schemaHash: this.claimSchema,
            operator: this.operator,
            slotIndex: this.slotIndex,
            value: this.values,
        };
        return await (0, query_1.checkQueryRequest)(query, outs, schemaLoader);
    }
    async verifyStates(resolver) {
        const userStateResolved = await resolver.resolve(this.userId.bigInt(), this.userState);
        if (!userStateResolved.latest) {
            throw new Error(`only latest states are supported`);
        }
        const issuerStateResolved = await resolver.resolve(this.issuerId.bigInt(), this.issuerAuthState);
        if (!issuerStateResolved) {
            throw new Error(`issuer state is not valid`);
        }
        const issuerNonRevStateResolved = await resolver.resolve(this.issuerId.bigInt(), this.issuerClaimNonRevState);
        if (!issuerNonRevStateResolved.latest &&
            Date.now() -
                issuerNonRevStateResolved.transitionTimestamp * 1000 >
                60 * 60 * 1000) {
            throw new Error(`issuer state for non-revocation proofs is not valid`);
        }
    }
}
exports.AtomicQuerySigPubSignals = AtomicQuerySigPubSignals;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXRvbWljU2lnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NpcmN1aXRzL2F0b21pY1NpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxtQ0FBaUU7QUFDakUsdUNBQW9DO0FBQ3BDLG1DQUFnQztBQUVoQywyREFBNEQ7QUFFNUQsTUFBYSx3QkFDWCxTQUFRLHlDQUFxQjtJQWE3QixZQUFZLFVBQW9CO1FBQzlCLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxVQUFVLENBQUMsTUFBTSxJQUFJLEVBQUUsRUFBRTtZQUMzQixNQUFNLElBQUksS0FBSyxDQUNiLDRDQUE0QyxFQUFFLFFBQzVDLFVBQVUsQ0FBQyxNQUNiLEVBQUUsQ0FDSCxDQUFDO1NBQ0g7UUFFRCxJQUFJLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QyxNQUFNLFdBQVcsR0FBZSxXQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV2QyxNQUFNLGFBQWEsR0FBZSxXQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXpFLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBRSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsc0JBQXNCLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FB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