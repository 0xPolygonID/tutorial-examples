"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkQueryRequest = void 0;
const keccak256_1 = __importDefault(require("keccak256"));
const nested_property_1 = __importDefault(require("nested-property"));
const util_1 = require("../core/util");
const operators = new Map([
    ['$noop', 0],
    ['$eq', 1],
    ['$lt', 2],
    ['$gt', 3],
    ['$in', 4],
    ['$nin', 5],
]);
const serializationIndexDataSlotAType = 'serialization:IndexDataSlotA';
const serializationIndexDataSlotBType = 'serialization:IndexDataSlotB';
const serializationValueDataSlotAType = 'serialization:ValueDataSlotA';
const serializationValueDataSlotBType = 'serialization:ValueDataSlotB';
async function checkQueryRequest(query, outputs, schemaLoader) {
    const issuerAllowed = query.allowedIssuers.some((issuer) => issuer === '*' || issuer === outputs.issuerId);
    if (!issuerAllowed) {
        throw new Error('issuer of claim is not allowed');
    }
    const loadResult = await schemaLoader.load(query.schema);
    if (loadResult.extension !== 'json-ld') {
        throw new Error('only json-ld schema is supported');
    }
    const toHash = new Uint8Array([
        ...loadResult.schema,
        ...toBytes(query.schema.type),
    ]);
    const schemaHash = (0, keccak256_1.default)(Buffer.from(toHash));
    // only json ld-schema are supported
    const cq = parseRequest(query.req, loadResult.schema, query.schema.type, outputs.value.length);
    if (outputs.operator !== cq.operator) {
        throw new Error(`operator that was used is not equal to request`);
    }
    if (outputs.operator === operators.get('$noop')) {
        // for noop operator slot and value are not used in this case
        return;
    }
    if (outputs.slotIndex !== cq.slotIndex) {
        throw new Error(`wrong claim slot was used in claim`);
    }
    if (outputs.operator !== cq.operator) {
        throw new Error(`operator that was used is not equal to request`);
    }
    for (let index = 0; index < cq.values.length; index++) {
        if (outputs.value[index].toString(10) !== cq.values[index].toString(10)) {
            throw new Error(`comparison value that was used is not equal to requested in query`);
        }
    }
    const shBigInt = (0, util_1.fromLittleEndian)(schemaHash.slice(Math.ceil(schemaHash.length / 2), schemaHash.length));
    if (shBigInt.toString() !== outputs.schemaHash.toString()) {
        throw new Error(`schema that was used is not equal to requested in query`);
    }
    return;
}
exports.checkQueryRequest = checkQueryRequest;
const toBytes = (s) => {
    //TODO: buffer is not present in browser
    const buffer = Buffer.from(s, 'utf8');
    const result = Uint8Array.from(buffer);
    return result;
};
function parseRequest(req, schema, credType, valueLength) {
    if (!req) {
        return {
            operator: operators.get('$noop'),
            values: null,
            slotIndex: 0,
        };
    }
    let fieldName = '';
    let fieldReq;
    if (Object.keys(req).length > 1) {
        throw new Error(`multiple requests  not supported`);
    }
    for (const [key, value] of Object.entries(req)) {
        fieldName = key;
        fieldReq = value;
        if (Object.keys(fieldReq).length > 1) {
            throw new Error(`multiple predicates for one field not supported`);
        }
        break;
    }
    const slotIndex = getFieldSlotIndex(fieldName, credType, schema);
    let operator;
    const values = new Array(valueLength).fill(BigInt(0));
    for (const [key, value] of Object.entries(fieldReq)) {
        if (!operators.has(key)) {
            throw new Error(`operator is not supported by lib`);
        }
        operator = operators.get(key);
        if (Array.isArray(value)) {
            for (let index = 0; index < value.length; index++) {
                values[index] = BigInt(value[index]);
            }
        }
        else {
            values[0] = BigInt(value);
        }
        break;
    }
    const cq = {
        operator,
        values,
        slotIndex,
    };
    return cq;
}
function getFieldSlotIndex(fieldName, credentialType, schema) {
    const obj = JSON.parse(Buffer.from(schema).toString('utf-8'));
    const type = nested_property_1.default.get(obj, `@context.0.${credentialType}.@context.${fieldName}.@type`);
    switch (type) {
        case serializationIndexDataSlotAType:
            return 2;
        case serializationIndexDataSlotBType:
            return 3;
        case serializationValueDataSlotAType:
            return 6;
        case serializationValueDataSlotBType:
            return 7;
        default:
            return -1;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2lyY3VpdHMvcXVlcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMERBQWtDO0FBRWxDLHNFQUE2QztBQUU3Qyx1Q0FBZ0Q7QUFFaEQsTUFBTSxTQUFTLEdBQXdCLElBQUksR0FBRyxDQUFDO0lBQzdDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUNaLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNWLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNWLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNWLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNWLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztDQUNaLENBQUMsQ0FBQztBQUVILE1BQU0sK0JBQStCLEdBQUcsOEJBQThCLENBQUM7QUFDdkUsTUFBTSwrQkFBK0IsR0FBRyw4QkFBOEIsQ0FBQztBQUV2RSxNQUFNLCtCQUErQixHQUFHLDhCQUE4QixDQUFDO0FBQ3ZFLE1BQU0sK0JBQStCLEdBQUcsOEJBQThCLENBQUM7QUFtQmhFLEtBQUssVUFBVSxpQkFBaUIsQ0FDckMsS0FBWSxFQUNaLE9BQXFCLEVBQ3JCLFlBQTJCO0lBRTNCLE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUM3QyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxNQUFNLEtBQUssT0FBTyxDQUFDLFFBQVEsQ0FDMUQsQ0FBQztJQUNGLElBQUksQ0FBQyxhQUFhLEVBQUU7UUFDbEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0tBQ25EO0lBRUQsTUFBTSxVQUFVLEdBQUcsTUFBTSxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUV6RCxJQUFJLFVBQVUsQ0FBQyxTQUFTLEtBQUssU0FB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