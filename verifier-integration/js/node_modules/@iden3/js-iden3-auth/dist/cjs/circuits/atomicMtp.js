"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AtomicQueryMTPPubSignals = void 0;
const core_1 = require("../core/core");
const id_1 = require("../core/id");
const query_1 = require("./query");
const ownershipVerifier_1 = require("./ownershipVerifier");
class AtomicQueryMTPPubSignals extends ownershipVerifier_1.IDOwnershipPubSignals {
    constructor(pubSignals) {
        super();
        if (pubSignals.length != 74) {
            throw new Error(`invalid number of Output values expected ${74} got ${pubSignals.length}`);
        }
        const userIdBytes = core_1.Core.intToBytes(BigInt(pubSignals[0]));
        this.userId = id_1.Id.idFromBytes(userIdBytes);
        this.userState = BigInt(pubSignals[1]);
        this.challenge = BigInt(pubSignals[2]);
        this.issuerClaimIdenState = BigInt(pubSignals[3]);
        const issuerIdBytes = core_1.Core.intToBytes(BigInt(pubSignals[4]));
        this.issuerId = id_1.Id.idFromBytes(issuerIdBytes);
        this.issuerClaimNonRevState = BigInt(pubSignals[5]);
        this.timestamp = parseInt(pubSignals[6], 10);
        this.claimSchema = BigInt(pubSignals[7]);
        this.slotIndex = parseInt(pubSignals[8], 10);
        this.operator = parseInt(pubSignals[9], 10);
        this.values = [];
        for (let index = 0; index < 64; index++) {
            const val = pubSignals[10 + index];
            this.values.push(BigInt(val));
        }
    }
    async verifyQuery(query, schemaLoader) {
        const outs = {
            issuerId: this.issuerId.string(),
            schemaHash: this.claimSchema,
            operator: this.operator,
            slotIndex: this.slotIndex,
            value: this.values,
        };
        return await (0, query_1.checkQueryRequest)(query, outs, schemaLoader);
    }
    async verifyStates(resolver) {
        const userStateResolved = await resolver.resolve(this.userId.bigInt(), this.userState);
        if (!userStateResolved.latest) {
            throw new Error(`only latest states are supported`);
        }
        const issuerStateResolved = await resolver.resolve(this.issuerId.bigInt(), this.issuerClaimIdenState);
        if (!issuerStateResolved) {
            throw new Error(`issuer state is not valid`);
        }
        const issuerNonRevStateResolved = await resolver.resolve(this.issuerId.bigInt(), this.issuerClaimNonRevState);
        if (!issuerNonRevStateResolved.latest &&
            Date.now() -
                issuerNonRevStateResolved.transitionTimestamp * 1000 >
                60 * 60 * 1000) {
            throw new Error(`issuer state for non-revocation proofs is not valid`);
        }
        return;
    }
}
exports.AtomicQueryMTPPubSignals = AtomicQueryMTPPubSignals;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXRvbWljTXRwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NpcmN1aXRzL2F0b21pY010cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1Q0FBb0M7QUFDcEMsbUNBQWdDO0FBR2hDLG1DQUFpRTtBQUVqRSwyREFBNEQ7QUFFNUQsTUFBYSx3QkFDWCxTQUFRLHlDQUFxQjtJQWE3QixZQUFZLFVBQW9CO1FBQzlCLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxVQUFVLENBQUMsTUFBTSxJQUFJLEVBQUUsRUFBRTtZQUMzQixNQUFNLElBQUksS0FBSyxDQUNiLDRDQUE0QyxFQUFFLFFBQzVDLFVBQVUsQ0FBQyxNQUNiLEVBQUUsQ0FDSCxDQUFDO1NBQ0g7UUFFRCxNQUFNLFdBQVcsR0FBZSxXQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWxELE1BQU0sYUFBYSxHQUFlLFdBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekUsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFFLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRTlDLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxNQUFNLENBQUMsVUFBVSxD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