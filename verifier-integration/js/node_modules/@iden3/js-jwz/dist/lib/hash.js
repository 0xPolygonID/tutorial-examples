"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkBigIntInField = exports.hash = exports.qString = void 0;
const cross_sha256_1 = require("cross-sha256");
const util_1 = require("./core/util");
const circom = require("circomlibjs");
// Q is the order of the integer field (Zq) that fits inside the SNARK.
exports.qString = '21888242871839275222246405745257275088548364400416034343698204186575808495617';
async function hash(message) {
    // 1. sha256 hash
    const hashBytes = Uint8Array.from(new cross_sha256_1.sha256().update(message).digest());
    // 2. swap hash before hashing
    const bi = (0, util_1.fromBigEndian)(hashBytes.reverse());
    let m = BigInt(0);
    if (checkBigIntInField(bi)) {
        m = bi;
    }
    else {
        m = bi % BigInt(exports.qString);
    }
    const poseidon = await circom.poseidon;
    const poseidonHash = await poseidon([m]);
    return poseidonHash;
}
exports.hash = hash;
// checkBigIntInField checks if given *big.Int fits in a Field Q element
function checkBigIntInField(a) {
    return a < BigInt(exports.qString);
}
exports.checkBigIntInField = checkBigIntInField;
//# sourceMappingURL=hash.js.map