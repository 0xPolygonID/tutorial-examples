"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.provingMethodGroth16AuthInstance = void 0;
const id_1 = require("./core/id");
const util_1 = require("./core/util");
const snarkjs = require("snarkjs");
const witness_calculator_1 = require("./witness_calculator");
const core_1 = require("./core/core");
const groth16 = 'groth16';
const authCircuit = 'auth';
async function unmarshall(pubsignals) {
    const outputs = {};
    if (pubsignals.length != 3) {
        throw new Error(`invalid number of Output values expected ${3} got ${pubsignals.length}`);
    }
    outputs.challenge = BigInt(pubsignals[0]);
    outputs.userState = BigInt(pubsignals[1]);
    const bytes = core_1.Core.intToBytes(BigInt(pubsignals[2]));
    outputs.userId = id_1.Id.idFromBytes(bytes);
    return outputs;
}
// ProvingMethodGroth16Auth defines proofs family and specific circuit
class ProvingMethodGroth16Auth {
    constructor(alg, circuitId) {
        this.alg = alg;
        this.circuitId = circuitId;
    }
    async verify(messageHash, proof, verificationKey) {
        const outputs = await unmarshall(proof.pub_signals);
        if (outputs.challenge !== (0, util_1.fromBigEndian)(messageHash)) {
            console.error('challenge is not equal to message hash');
            return false;
        }
        return await snarkjs.groth16.verify(JSON.parse(Buffer.from(verificationKey).toString()), proof.pub_signals, proof.proof);
    }
    async prove(inputs, provingKey, wasm) {
        const witnessCalculator = await (0, witness_calculator_1.witnessBuilder)(wasm);
        const jsonString = Buffer.from(inputs).toString('utf8');
        const parsedData = JSON.parse(jsonString);
        const wtnsBytes = await witnessCalculator.calculateWTNSBin(parsedData, 0);
        const { proof, publicSignals } = await snarkjs.groth16.prove(provingKey, wtnsBytes);
        return {
            proof: proof,
            pub_signals: publicSignals,
        };
    }
}
exports.provingMethodGroth16AuthInstance = new ProvingMethodGroth16Auth(groth16, authCircuit);
//# sourceMappingURL=authGroth16.js.map