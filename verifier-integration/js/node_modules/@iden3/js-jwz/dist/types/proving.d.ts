export interface ZKProof {
    proof: ProofData;
    pub_signals: string[];
}
export interface ProofData {
    pi_a: string[];
    pi_b: string[][];
    pi_c: string[];
    protocol: string;
}
export interface ProvingMethod {
    verify(messageHash: Uint8Array, proof: ZKProof, verificationKey: Uint8Array): Promise<boolean>;
    prove(inputs: Uint8Array, provingKey: Uint8Array, wasm: Uint8Array): Promise<ZKProof>;
    readonly alg: string;
    readonly circuitId: string;
}
export declare function registerProvingMethod(alg: string, f: () => ProvingMethod): Promise<void>;
export declare function getProvingMethod(alg: string): Promise<ProvingMethod>;
export declare function getAlgorithms(): Promise<string[]>;
export declare type ProofInputsPreparerHandlerFunc = (hash: Uint8Array, circuitId: string) => Uint8Array;
export declare function prepare(f: ProofInputsPreparerHandlerFunc, hash: Uint8Array, circuitId: string): Uint8Array;
